@inject IUserService UserService

<EditForm EditContext="@context" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Change Password</MudText>
        </TitleContent>
        <DialogContent>
            @if (AppState.IsBusy)
            {
                <MudProgressLinear Class="rounded-lg" Indeterminate Color="Color.Primary" Size="Size.Small"/>
            }
            else
            {
                <MudGrid Spacing="1" Class="pa-2">
                    <MudItem xs="12">
                        <MudTextField id="figure-center" T="string" Value="passwordModel!.OldPassword" Label="Old Password"
                                    Variant="Variant.Outlined" For="@(() => passwordModel!.OldPassword)" ValueChanged="OldPasswordChanged"
                                    Adornment="Adornment.End" InputType="@OldPasswordInput"
                                    AdornmentIcon="@OldPasswordInputIcon" OnAdornmentClick="OldPasswordVisibilityClick" />
                    </MudItem>
                    @if (IsValid)
                    {
                        <MudItem xs="12">
                            <MudTextField id="figure-center" Disabled="@isReadOnly" ReadOnly="@isReadOnly"
                                        @bind-Value="passwordModel!.NewPassword" Label="New Password"
                                        Variant="Variant.Outlined" For="@(() => passwordModel!.NewPassword)"
                                        Adornment="Adornment.End" InputType="@PasswordInput" AutoFocus="SetFocus"
                                        AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="PasswordVisibilityClick" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField id="figure-center" Disabled="@isReadOnly" ReadOnly="@isReadOnly"
                                        @bind-Value="passwordModel!.ConfirmPassword" Label="Confirm Password"
                                        Variant="Variant.Outlined" For="@(() => passwordModel!.ConfirmPassword)"
                                        Adornment="Adornment.End" InputType="@ConfirmPasswordInput"
                                        AdornmentIcon="@ConfirmPasswordInputIcon" OnAdornmentClick="ConfirmPasswordVisibilityClick" />
                        </MudItem>
                    }                    

            </MudGrid>
                
            }
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Close</MudButton>
            <MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                       Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType PasswordInput = InputType.Password;

    string OldPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType OldPasswordInput = InputType.Password;

    string ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType ConfirmPasswordInput = InputType.Password;
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    private NewPasswordModel? passwordModel = new();
    private EditContext? context = new(new NewPasswordModel());    
    private bool isReadOnly { get; set; } = true;    
    private bool IsValid, ShowNew, ShowOld, ShowConfirm, SetFocus;
    Guid UserID;
    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;
        UserID = await localStorage.GetItemAsync<Guid>("uid");
        passwordModel = await UserService.GetOldPassword(UserID);        
        if (passwordModel is null)
        {
            SnackBar.Add("Invalid user", Severity.Error);
            Cancel();
        }
        passwordModel!.OldPassword = string.Empty;
        passwordModel!.NewPassword = string.Empty;
        context = new(passwordModel!);
        AppState.IsBusy = false;
    }

    void Cancel() => MudDialog?.Cancel();

    void OldPasswordChanged(string oldPassword)
    {
        string hashedPassword = Security.Encrypt(oldPassword);
        if (hashedPassword == passwordModel!.HashedPassword)
        {
            isReadOnly = false;
            SetFocus = false;
            IsValid = true;
        }
        else
        {
            SnackBar.Add("Invalid Password", Severity.Error);
            isReadOnly = true;
            SetFocus = true;
            IsValid = false;
        }
        passwordModel.OldPassword = oldPassword;
        StateHasChanged();
    }

    private async Task Save()
    {
        AppState.IsProcessing = true;
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you wish update password", yesText: "Yes", cancelText: "No");
        if (prompt is null || !prompt.Value)
        {
            AppState.IsProcessing = false;
            return;
        }
        string hashedPassword = Security.Encrypt(passwordModel!.NewPassword!);
        passwordModel!.HashedPassword = hashedPassword;
        try
        {
            await UserService.ChangePassword(UserID, passwordModel!);
            SnackBar.Add("Password Successfully Updated", Severity.Success);
            passwordModel = new();
            Cancel();
        }
        catch (System.Exception)
        {
            SnackBar.Add("An error occured", Severity.Error);
            throw;
        }        
        AppState.IsProcessing = false;
    }

    void PasswordVisibilityClick()
    {
        if (ShowNew)
        {
            ShowNew = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            ShowNew = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
    void OldPasswordVisibilityClick()
    {
        if (ShowOld)
        {
            ShowOld = false;
            OldPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            OldPasswordInput = InputType.Password;
        }
        else
        {
            ShowOld = true;
            OldPasswordInputIcon = Icons.Material.Filled.Visibility;
            OldPasswordInput = InputType.Text;
        }
    }

    void ConfirmPasswordVisibilityClick()
    {
        if (ShowConfirm)
        {
            ShowConfirm = false;
            ConfirmPasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            ConfirmPasswordInput = InputType.Password;
        }
        else
        {
            ShowConfirm = true;
            ConfirmPasswordInputIcon = Icons.Material.Filled.Visibility;
            ConfirmPasswordInput = InputType.Text;
        }
    }

}