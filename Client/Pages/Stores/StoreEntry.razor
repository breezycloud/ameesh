@using Client.Handlers
@inject IStoreService Service
@implements IAsyncDisposable
<EditForm Model="@Data" OnValidSubmit="Save">
	<DataAnnotationsValidator/>
	<MudDialog>
		<TitleContent>
			<MudText Typo="Typo.h6">@(IsEdit ? "Update" : "Add") Lab Test</MudText>
		</TitleContent>
		<DialogContent>
			<MudGrid Spacing="1">
				<MudItem xs="12">
					<MudTextField @ref="_TxtName" @bind-Value="Data.BranchName" Label="Name" Variant="Variant.Outlined" For="@(() => Data.BranchName)" />
				</MudItem>
				<MudItem xs="12" sm="6">
					<MudTextField @bind-Value="Data.PhoneNo1" Label="Contact 1" Variant="Variant.Outlined" For="@(() => Data.PhoneNo1)" />
				</MudItem>
				<MudItem xs="12" sm="6">
					<MudTextField @bind-Value="Data.PhoneNo2" Label="Contact 2" Variant="Variant.Outlined" />
				</MudItem>
				<MudItem xs="12">
					<MudTextField @bind-Value="Data.BranchAddress" Label="Address" Variant="Variant.Outlined" For="@(() => Data.BranchAddress)" />
				</MudItem>
			</MudGrid>						
		</DialogContent>
		<DialogActions>
			<MudButton OnClick="Close">Close</MudButton>
			<MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
					   Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
		</DialogActions>
	</MudDialog>	
</EditForm>

@code {
	[CascadingParameter]
	public MudDialogInstance? DialogInstance { get; set; }	
	[Parameter]
	public Store Data { get; set; } = new();
	[Parameter]
	public bool IsEdit { get; set; } = false;

	MudTextField<string?>? _TxtName { get; set; }

	private HubConnection? hub;
	protected override async Task OnInitializedAsync()
	{
		hub = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs"), option =>
		{
			option.AccessTokenProvider = () => Task.FromResult(AppState.Token)!;
		}).WithStatefulReconnect().Build();
		await hub.StartAsync();
	}

	void Close() => DialogInstance?.Close(DialogResult.Ok(true));

	private async Task Save()
	{
		AppState.IsProcessing = true;
		var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to save", yesText: "Yes", cancelText: "No");
		if (prompt is null)
		{
			AppState.IsProcessing = false;
			return;
		}
		bool result = false;
		try
		{
			Data!.BranchName = StringConverter.ConvertToTitleCase(Data!.BranchName!);			
			if (!IsEdit)
				result = await Service.AddStore(Data!);
			else
				result = await Service.EditStore(Data!);

			SnackBar.Add("Store Successfully Updated", Severity.Success);
			await hub!.SendAsync("UpdateStores");
			Close();
		}
		catch (Exception)
		{
			if (!result)
				SnackBar.Add("Failed to save", Severity.Error);
			throw;
		}
		AppState.IsProcessing = false;
	}	

	async Task ClearControls()
	{
		if (!IsEdit)
			Data.Id = Guid.NewGuid();
		Data.BranchName = "";
		Data.BranchAddress = "";
		Data.PhoneNo1 = "";
		Data.PhoneNo2 = "";
		await _TxtName!.FocusAsync();
	}

	public async ValueTask DisposeAsync()
	{
		await hub!.DisposeAsync();
	}
}
