<MudDialog>
    <DialogContent>
        <MudStack Row="false" AlignItems="AlignItems.Start" Justify="Justify.SpaceEvenly" Spacing="0">
            @foreach (var bill in bills!.OrderByDescending(x => x.Date))
            {
                <MudStack Row Justify="Justify.SpaceBetween" Wrap="Wrap.Wrap">
                    <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Wrap="Wrap.Wrap" Spacing="1">
                        <MudText Typo="Typo.body1">
                            <strong>Items @(bill!.Rows!.Count)</strong>                            
                        </MudText>
                        <MudText Typo="Typo.caption">
                            Cost <strong>@(bill!.Rows!.Sum(x => (x.Quantity * x.Cost)).ToString("N2"))</strong> 
                        </MudText>
                        <MudText Typo="Typo.caption">
                            Date @(bill!.Date)                            
                        </MudText>
                    </MudStack>
                    <MudStack AlignItems="AlignItems.Start" Justify="Justify.FlexStart" Wrap="Wrap.Wrap" Spacing="1">                        
                        <MudButton Size="Size.Small" Color="Color.Primary" OnClick="() => AddCart(bill)">Add to Cart</MudButton>                        
                        <MudButton Size="Size.Small" Color="Color.Error" OnClick="() => DeleteCart(bill)">Delete</MudButton>                        
                    </MudStack>                    
                </MudStack>
                <MudDivider DividerType="DividerType.FullWidth" />
            }            
        </MudStack>
    </DialogContent>
    @* <DialogActions>
        <MudButton OnClick="Cancel">Close</MudButton>
        <MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                    Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Pay now")</MudButton>
    </DialogActions> *@
</MudDialog>


@code {
    [CascadingParameter] public MudDialogInstance? DialogInstance { get; set; }
    void Cancel() => DialogInstance!.Close(DialogResult.Ok(true));
    List<SuspendBills>? bills = [];
    HubConnection? hub;

    [Parameter]
    public Guid id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        bills = await localStorage.GetItemAsync<List<SuspendBills>?>("cart");
        var builder = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs")).WithAutomaticReconnect().WithStatefulReconnect();
        builder.Services.Configure<HubConnectionOptions>(o => o.StatefulReconnectBufferSize = 1000);
        hub = builder.Build();
        var internetfound = await js.InvokeAsync<bool>("checkinternet");
        if (internetfound)
        {
            await hub.StartAsync();                        
        }
    }
    private async Task AddCart(SuspendBills bill) 
    {        
        bills!.Remove(bill);
        AppState.UpdateCart(bill.Rows!, bills.Count);
        await localStorage.SetItemAsync<List<SuspendBills>?>("cart", bills);
        await Task.Yield();
        Cancel();
    }

    private async Task DeleteCart(SuspendBills bill) 
    {        
        bills!.Remove(bill);
        await hub!.SendAsync("AddProductQuantity", id, bill.Rows);        
        AppState.UpdateCart(bill.Rows!, bills.Count);
        await localStorage.SetItemAsync<List<SuspendBills>?>("cart", bills);
        await Task.Yield();
        Cancel();
    }
}