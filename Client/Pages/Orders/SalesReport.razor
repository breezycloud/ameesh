@using Shared.Enums
@inject IOrderService OrderService
@inject IStoreService StoreService
@inject IUserService UserService

<EditForm Model="reportFilter" OnValidSubmit="GetReport">
    <DataAnnotationsValidator/>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Sales Report</MudText>
        </TitleContent>
        <DialogContent>
            <MudStack Spacing="5" AlignItems="AlignItems.Center" Justify="Justify.Center" Wrap="Wrap.Wrap">
                <AuthorizeView Roles="Admin, Master, Manager" Context="auth">
                    <Authorized>
                        @* <MudToggleGroup T="string" Style="width: 300px;" @bind-Value="reportFilter!.Type" Outline Delimiters Dense Rounded CheckMark FixedContent>
                            <MudToggleItem Value="@("Store")" />
                            <MudToggleItem Value="@("Lab")" />                
                        </MudToggleGroup> *@
                        <MudAutocomplete AnchorOrigin="Origin.BottomCenter" Dense="true" Label="Branch" T="Store"
                                 @bind-Value="Store" SearchFunc="@Search" ShowProgressIndicator="true"
                                 Variant="Variant.Outlined" Immediate="true" ResetValueOnEmptyText Margin="Margin.Dense"
                                 ToStringFunc="@(e => e == null ? null : $"{e.BranchName}")" />
                        <MudRadioGroup @bind-Value="reportFilter!.Option">
                            <MudRadio Value="@("All")" Color="Color.Primary">All</MudRadio>
                            <MudRadio Value="@("User")" Color="Color.Secondary">Per User</MudRadio>                    
                        </MudRadioGroup>
                        @if (reportFilter!.Option == "User")
                        {
                            <MudAutocomplete AnchorOrigin="Origin.BottomCenter" Dense="true" Label="Users" T="User"
                                    @bind-Value="User" SearchFuncWithCancel="@SearchUsers" ShowProgressIndicator="true"
                                    Variant="Variant.Outlined" Immediate="true" ResetValueOnEmptyText Margin="Margin.Dense"
                                    ToStringFunc="@(e => e == null ? null : $"{e.ToString()}")" />
                        }
                    </Authorized>
                </AuthorizeView>                                
                <MudRadioGroup T="string" Value="reportFilter!.Criteria" ValueChanged="FilterChanged">
                    <MudRadio Size="Size.Small" Value="@("Date")">Date</MudRadio>
                    <MudRadio Size="Size.Small" Value="@("Range")">Range</MudRadio>
                </MudRadioGroup>
                <MudDatePicker @bind-Date="StartDate" PickerVariant="PickerVariant.Dialog"
                               Label="@(reportFilter!.Criteria == "Date" ? "Date" : "Start Date")" DisableToolbar="true" />
                @if (reportFilter!.Criteria == "Range")
                {
                    <MudDatePicker @bind-Date="EndDate" PickerVariant="PickerVariant.Dialog"
                                   Label="End Date" DisableToolbar="true" />
                }                
            </MudStack>        
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Close">Close</MudButton>
            <MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                       Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Process")</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>
@code {
    [CascadingParameter]
    public MudDialogInstance? DialogInstance { get; set; }
    ReportFilter? reportFilter = new();
    private string Criteria = "Date";
    private PaymentStatus Status = PaymentStatus.Unpaid;
    private MudDateRangePicker? _picker;
    private DateTime? StartDate = DateTime.UtcNow;
    private DateTime? EndDate = DateTime.UtcNow;
    private DateRange _dateRange = new DateRange(DateTime.UtcNow.Date, DateTime.UtcNow.AddDays(7).Date);

    private string? SelectedOption = "Store";

    private Store? Store; private Store[]? stores = [];

    private User? User; private User[]? Users = [];
    protected override async Task OnInitializedAsync()
    {
        reportFilter!.ReportOption = "Sales";
        var access = await localStorage.GetItemAsync<string?>("access");
        if (access == "Admin" || access == "Master")
        {            
        }
        else
        {
            AppState!.StoreID = await localStorage.GetItemAsync<Guid>("branch");
            Store = await StoreService.GetStore(AppState!.StoreID);
            SelectedOption = "Store";
            reportFilter.Type = SelectedOption;            
            reportFilter!.Option = "User";
            User = new();
            User.Id = await localStorage.GetItemAsync<Guid>("uid");
        }
    }

    void Close() => DialogInstance?.Close(DialogResult.Ok(true));

    void FilterChanged(string option)
    {
        reportFilter!.Criteria = option;
        StateHasChanged();
    }

    private async Task<IEnumerable<Store>?> Search(string value)
    {
        try
        {
            stores = await StoreService.GetStores();
            if (string.IsNullOrEmpty(value))
                return stores;

            return stores!.Where(x => x.BranchName!.Contains(value, StringComparison.OrdinalIgnoreCase));
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task<IEnumerable<User>?> SearchUsers(string value, CancellationToken token)
    {
        try
        {
            Users = await UserService.GetUsers(token);
            if (string.IsNullOrEmpty(value))
                return Users.AsParallel().Where(x => x.Role.ToString().Contains("Cashier", StringComparison.OrdinalIgnoreCase));

            return Users!.AsParallel().Where(x => x.ToString()!.Contains(value, StringComparison.OrdinalIgnoreCase)
                && x.Role.ToString().Contains("Cashier", StringComparison.OrdinalIgnoreCase));
        }
        catch (Exception)
        {

            throw;
        }
    }

    private async Task GetReport()
    {
        AppState.IsProcessing = true;
        if (Store!.Id == Guid.Empty)
        {
            SnackBar.Add("Select store to proceed", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        if (reportFilter!.Option == "User" && string.IsNullOrEmpty(User!.Id.ToString()))
        {
            SnackBar.Add("Select user to proceed", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        if (reportFilter!.Option == "User" && !string.IsNullOrEmpty(User!.Id.ToString()))
        {
            reportFilter!.UserID = User.Id;
        }            
        
        reportFilter!.StoreID = Store!.Id;
        if (reportFilter!.Criteria == "Date")
        {
            if (StartDate is null)
            {
                SnackBar.Add("Select date to proceed", Severity.Warning);
                AppState.IsProcessing = false;
                return;
            }
            reportFilter!.StartDate = StartDate;
        }
        else
        {
            if (StartDate is null || EndDate is null)
            {
                SnackBar.Add("Select start or end date to proceed", Severity.Warning);
                AppState.IsProcessing = false;
                return;
            }            
            reportFilter!.StartDate = StartDate;
            reportFilter!.EndDate = EndDate;
        }
        try
        {
            await OrderService.SaleReport(reportFilter);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
}
