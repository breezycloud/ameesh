@using Client.Handlers
@using Client.Services.Welfare
@using Shared.Enums
@using Shared.Models.Welfare
@attribute [Authorize]
@inject ISalaryService SalaryService

@implements IAsyncDisposable

<EditForm Model="@Data" OnValidSubmit="Get">
	<DataAnnotationsValidator/>
	<MudDialog>
		<TitleContent>
			<MudText Typo="Typo.h6">Salary & Welfare Report</MudText>
		</TitleContent>
		<DialogContent>
            @if (AppState.IsBusy)
            {
                <MudProgressLinear Class="rounded-lg" Indeterminate Color="Color.Primary" Size="Size.Small"/>
            }
            else
            {
                <MudGrid Spacing="1">
                    <MudItem xs="12">
                        <MudSelect Strict Margin="Margin.Dense" Dense AnchorOrigin="Origin.BottomCenter" @bind-Value="Data!.ReportType" Label="Report Type" Variant="Variant.Outlined" For="(() => Data!.ReportType)">
                            <MudSelectItem Value="@("Salary")">Salary</MudSelectItem>
                            <MudSelectItem Value="@("Advance")">Advance</MudSelectItem>
                            <MudSelectItem Value="@("Penalty")">Penalty</MudSelectItem>
                            <MudSelectItem Value="@("Bonus")">Bonus</MudSelectItem>
                        </MudSelect>
                    </MudItem>                
                    <MudItem xs="12" sm="6">
                    <MudSelect Margin="Margin.Dense" Dense AnchorOrigin="Origin.BottomCenter"
                                @bind-Value="Data.Month" Label="Month" Variant="Variant.Outlined" 
                                For="(() => Data.Month)">
                            @foreach (var month in Months)
                            {
                                <MudSelectItem Value="@(month as int?)">
                                    @StringConverter.ConvertToMonth(month)
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect Margin="Margin.Dense" Dense AnchorOrigin="Origin.BottomCenter"
                                @bind-Value="Data.Year" Label="Year" Variant="Variant.Outlined" 
                                For="(() => Data.Year)">
                            @foreach (var year in Years.OrderByDescending(y => y))
                            {
                                <MudSelectItem Value="@(year as int?)">@year</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                </MudGrid>
            }                
		</DialogContent>
		<DialogActions>
			<MudButton OnClick="Close">Close</MudButton>
			<MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
					   Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Get Report")</MudButton>
		</DialogActions>
	</MudDialog>	
</EditForm>

@code {
	[CascadingParameter]
	public MudDialogInstance? DialogInstance { get; set; }
    private List<ReportCriteria>? MonthYear = [];
    private ReportCriteria? Data = new();    
    private List<int> Months = Enumerable.Range(1, 12).ToList();
    private List<int> Years = Enumerable.Range(DateTime.UtcNow.Year - 5, 11).ToList();
    void Close() => DialogInstance?.Close(DialogResult.Ok(true));

    protected override async Task OnInitializedAsync()
    {
        AppState.IsBusy = true;
        MonthYear = await SalaryService.GetSalMonthYear();
        AppState.IsBusy = false;
    }
    private async Task<IEnumerable<int>> SearchMonth(string? searchTerm)
    {
        var query = Months.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
            query = query.Where(m => m.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        return await Task.FromResult(query);
    }

    private async Task<IEnumerable<int>> SearchYear(string? searchTerm)
    {
        var query = Years.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
            query = query.Where(y => y.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

        return await Task.FromResult(query);
    }

    private async Task Get()
    {
        AppState.IsProcessing = true;
        await SalaryService.GetReport(Data!);
        AppState.IsProcessing = false;
    }

    public ValueTask DisposeAsync() => ValueTask.CompletedTask;
}