@using Shared.Enums
@inject IProductService ItemService
@implements IAsyncDisposable


<EditForm Model="Stock" OnValidSubmit="Save">
    <DataAnnotationsValidator/>
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Restock @(Option)</MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudTextField @bind-Value="ProductName" Label="Product" Variant="Variant.Outlined" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField id="figure-right" @bind-Value="Stock!.BuyPrice" ReadOnly="IsReadOnly" Format="N2" Label="Cost Price" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField id="figure-right" @bind-Value="SellPrice" Format="N2" Label="Sell Price" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                @if (Option == "Store")
                {
                    
                    <MudItem xs="12">
                        <MudDatePicker @bind-Date="Stock!.ExpiryDate" ReadOnly PickerVariant="PickerVariant.Dialog" DateFormat="dd/MM/yyyy" Label="Expiry Date" Variant="Variant.Outlined" For="(() => _ExpDate)" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="decimal?" Value="(Stock!.Quantity + NewQty)" Label="Current Quantity" Variant="Variant.Outlined"></MudNumericField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="decimal?" @bind-Value="NewQty" Label="New Quantity" Variant="Variant.Outlined"></MudNumericField>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField T="decimal" ReadOnly Value="(DispensaryQty + NewQty!.Value)" Label="Current Quantity" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="decimal?" @bind-Value="NewQty" Label="New Quantity" Min="0" Max="StoreQty" Variant="Variant.Outlined"></MudNumericField>
                    </MudItem>
                }

            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Close">Close</MudButton>
            <MudButton Disabled="@AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                       Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    public MudDialogInstance? DialogInstance { get; set; }
    [Parameter]
    public string? Option { get; set; }
    [Parameter]
    public Guid ProductId { get; set; }
    [Parameter]
    public string? ProductName { get; set; }
    [Parameter]
    public decimal SellPrice { get; set; }
    [Parameter]
    public decimal StoreQty { get; set; } = 0;
    [Parameter]
    public decimal DispensaryQty { get; set; } = 0;
    [Parameter]
    public decimal? NewQty { get; set; } = 0;
    [Parameter] 
    public Guid StoreID { get; set; }
    [Parameter] 
    public Guid StockID { get; set; }
    [Parameter]
    public Stock? Stock { get; set; } = new();   

    private DateTime? _ExpDate;
    private bool IsReadOnly = true;

    private HubConnection? hub;

    protected override async Task OnParametersSetAsync()
    {
        hub = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs")).WithStatefulReconnect().Build();
        var mode = await localStorage.GetItemAsync<bool?>("mode");
        if (mode is not null || mode!.Value)
            await hub.StartAsync();        

        IsReadOnly = Option == "Store" ? false : true;
        // _ExpDate = Item!.ExpiryDate is not null ? Item!.ExpiryDate.Value.ToDateTime(TimeOnly.MinValue) : null;
    }


    void Close() => DialogInstance?.Close(DialogResult.Ok(true));


    private async Task Save()
    {
        AppState.IsProcessing = true;
        if (Stock!.BuyPrice > SellPrice)
        {
            SnackBar.Add("Cost price cannot be more than sell price", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        if (NewQty <= 0 || NewQty is null)
        {
            SnackBar.Add("Quantity is required", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }           
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to save", yesText: "Yes", cancelText: "No");
        if (prompt is null)
        {
            AppState.IsProcessing = false;
            return;
        }
        try
        {
            var stock = new RestockingModel
            {
                ProductId = ProductId,
                StoreID = StoreID,
                CurrentQty = StoreQty,
                NewQty = NewQty!.Value,
                Option = Option,
                ProductName = ProductName,
                ExpiryDate = _ExpDate,
                StockID = Stock!.id
            };
            bool result = await ItemService.AddStock(stock);
            if (!result)
            {
                SnackBar.Add("Operation failed", Severity.Warning);
            }
            else
            {
                await hub!.SendAsync("UpdateProducts");
                SnackBar.Add("Stock Successfully Updated", Severity.Success);
                Close();
            }
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hub!.StopAsync();
        await hub!.DisposeAsync();
    }

}
