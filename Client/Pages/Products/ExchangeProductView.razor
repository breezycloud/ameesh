@using Shared.Enums
@inject ICustomerService CustomerService
@inject IProductService ItemService
@inject IOrderService OrderService
@implements IAsyncDisposable


<EditForm Model="@Data" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">@(Option) Exchange Products</MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid Spacing="2">                
                <MudItem xs="12">
                    <MudTextField @bind-Value="ProductName" Label="Product" Variant="Variant.Outlined" ReadOnly Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Data!.BuyPrice" ReadOnly Format="N2" Label="Buying Price" Variant="Variant.Outlined" For="() => Data!.BuyPrice" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Cost" ReadOnly Format="N2" Label="Selling Price" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>              
                <MudItem xs="12" sm="6">
                    <MudNumericField id="figure-right" T="int?" Value="Data!.Quantity" Label="Total Quantity" ReadOnly Variant="Variant.Outlined" For="() => Data!.Quantity" Margin="Margin.Dense"></MudNumericField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Value="Data!.ExpiryDate" ReadOnly Format="dd/MM/yyyy" Label="Expiry Date" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudAutocomplete AnchorOrigin="Origin.BottomCenter" Dense="true" Label="Customer" T="Customer"
                                     @bind-Value="customer" SearchFunc="@Search" ShowProgressIndicator="true"
                                     Variant="Variant.Outlined" Immediate="true" ResetValueOnEmptyText Margin="Margin.Dense"
                                     ToStringFunc="@(e => e == null ? null : $"{e.CustomerName}")" AutoFocus />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField id="figure-right" T="int?" Value="@(Data!.Quantity - NewQty)" Label="Remaining Quantity" ReadOnly Variant="Variant.Outlined" For="() => Data!.Quantity" Margin="Margin.Dense"></MudNumericField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField id="figure-right" T="int?" Value="NewQty" Label="Quantity" Max="Data!.Quantity" ValueChanged="QtyChanged" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField>
                </MudItem>       
                <MudItem xs="12" sm="6">
                    <MudTextField id="figure-right" Value="Total" Label="Total" ReadOnly Format="N2" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField id="figure-right" @bind-Value="Discount" Label="Discount" Format="N2" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>                
                <MudItem xs="12">
                    <MudTextField id="figure-right" Value="SubTotal" Label="Sub Total" ReadOnly Format="N2" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Close">Close</MudButton>
            <MudButton Disabled="@AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                       Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    public MudDialogInstance? DialogInstance { get; set; }
    [Parameter]
    public string? Option { get; set; }
    [Parameter]
    public Guid ProductId { get; set; }
    [Parameter]
    public string? ProductName { get; set; }
    [Parameter]
    public decimal Cost { get; set; }
    [Parameter]
    public Guid StoreID { get; set; }    
    [Parameter]
    public Stock? Data { get; set; } = new();
    private bool IsReadOnly = false;
    private int? NewQty = 0;    
    private decimal Discount { get; set; }
    private decimal SubTotal => NewQty >= 0 ? Cost * NewQty!.Value - Discount : 0;
    private decimal Total => NewQty >= 0 ? Cost * NewQty!.Value : 0;
    private Customer? customer = new();
    private Customer[]? Customers = [];
    private HubConnection? hub;
    protected override async Task OnParametersSetAsync()
    {
        hub = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs"), option =>
        {
            option.AccessTokenProvider = () => Task.FromResult(AppState.Token)!;
        }).WithStatefulReconnect().Build();
        var mode = await localStorage.GetItemAsync<bool?>("mode");
        if (mode is not null || mode!.Value)
            await hub.StartAsync();
    }

    void Close() => DialogInstance?.Close(DialogResult.Ok(true));

    void QtyChanged(int? value)
    {
        NewQty = value;
        Discount = 0;
        StateHasChanged();
    }

    private async Task<IEnumerable<Customer>?> Search(string value)
    {
        try
        {
            Customers = await CustomerService.GetCustomers();
            if (string.IsNullOrEmpty(value))
            {
                Customers!.Where(x => !x.Regular);
            }
            return Customers!.Where(x => !x.Regular && x.CustomerName!.Contains(value, StringComparison.InvariantCultureIgnoreCase) || x.PhoneNo!.Contains(value, StringComparison.InvariantCultureIgnoreCase));
        }
        catch (System.Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        return new HashSet<Customer>();
    }

    private async Task Save()
    {
        AppState.IsProcessing = true;
        if (string.IsNullOrEmpty(customer!.CustomerName))
        {
            SnackBar.Add("Select customer to proceed", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        if (NewQty <= 0 || NewQty is null)
        {
            SnackBar.Add("Quantity is required", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }        
        if (Discount <= 0)
        {
            SnackBar.Add("Discount is required", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to save", yesText: "Yes", cancelText: "No");
        if (prompt is null)
        {
            AppState.IsProcessing = false;
            return;
        }
        try
        {
            DateTime Now = DateTime.Now;
            bool result = false;
            Guid OrderID = Guid.NewGuid();
            string LastReceiptNo = OrderService.GenerateReceiptNo();
            Guid UserID = await localStorage.GetItemAsync<Guid>("uid");
            var order = new Order()
            {
                Id = OrderID,
                ReceiptNo = LastReceiptNo,
                UserId = UserID,
                CustomerId = customer!.Id,
                Discount = Discount,
                OrderDate = DateOnly.FromDateTime(DateTime.Now),
                StoreId = StoreID,
                Status = OrderStatus.Completed,
                ProductOrders = new List<ProductOrderItem>()
                {
                    new ProductOrderItem
                    {
                        Id = Guid.NewGuid(),
                        OrderId = OrderID,
                        StockId = Data!.id,
                        BuyPrice = Data!.BuyPrice.GetValueOrDefault(),
                        Cost = Cost,
                        Product = ProductName,
                        Quantity = NewQty.GetValueOrDefault(),
                        ProductId = ProductId,
                        Status = OrderStatus.Completed,
                    }
                },
                Payments = new List<Payment>() { new Payment { OrderId = OrderID, PaymentDate = AppState.CurrentDateTime, PaymentMode = PaymentMode.None, Amount = SubTotal, CreatedDate = AppState.CurrentDateTime } },
                CreatedDate = Now,
                ModifiedDate = Now
            };
            result = await OrderService.AddProductOrder(order);
            if (!result)
            {
                SnackBar.Add("Operation failed", Severity.Warning);
            }
            else
            {
                var items = order!.ProductOrders!.ToArray();
                await hub!.SendAsync("UpdateStock", AppState.StoreID, Option, items);                         
                await hub!.SendAsync("UpdatePharmarcyOrders");
                SnackBar.Add("Stock Successfully Updated", Severity.Success);
                Close();
            }
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    Func<Stock, string> converter = p => $"Quantity {p?.Quantity} Expires on {p?.ExpiryDate}";
    public async ValueTask DisposeAsync()
    {
        await hub!.StopAsync();
        await hub!.DisposeAsync();
    }

}
