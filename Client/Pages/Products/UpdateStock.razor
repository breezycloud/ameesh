@using Shared.Enums
@inject IProductService ItemService
@implements IAsyncDisposable


<EditForm Model="Stock" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Product</MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid Spacing="2">
                <MudItem xs="12">
                    <MudTextField @bind-Value="Product!.ProductName" Margin="Margin.Dense" Label="Product" Variant="Variant.Outlined" Required />
                </MudItem>     
                <MudItem xs="12">
                    <MudSelect T="Stock" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" @bind-Value="@Stock" Label="Select stock"
                                Dense Variant="Variant.Outlined" ToStringFunc="@(e => e==null ? null : $"Qty left {e.Quantity} Exp on {e.ExpiryDate!.Value:dd/MM/yyyy}")">
                        @foreach (var e in Stocks!)
                        {
                            <MudSelectItem T="Stock" Value="@e"></MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>           
                <MudItem xs="12">
                    <MudNumericField @bind-Value="Stock!.BuyPrice" Label="Cost Price" Margin="Margin.Dense" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>
                <MudItem xs="12">
                    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
                        <MudRadioGroup T="MarkupType" @bind-Value="Product!.MarkupType">
                            <MudRadio Dense Value="@MarkupType.Fixed">Fixed Amount</MudRadio>
                            <MudRadio Dense Value="@MarkupType.Percentage">Percentage</MudRadio>
                        </MudRadioGroup>
                    </MudStack>
                </MudItem>
                @if (Product!.MarkupType == MarkupType.Fixed)
                {
                    <MudItem xs="12" sm="6">
                        <MudTextField id="figure-right"  T="decimal" Value="Product!.MarkupAmount" ValueChanged="CalculateSellPrice" Format="N2" Label="Amount" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    </MudItem>
                }
                else
                {
                    <MudItem xs="12" sm="6">
                        <MudNumericField id="figure-center" T="decimal" Value="Product!.MarkupPercentage" ValueChanged="CalculateSellPrice" Label="Percentage" Min="0" Max="100" Variant="Variant.Outlined" Margin="Margin.Dense"></MudNumericField>
                    </MudItem>
                }
                <MudItem xs="12" sm="6">
                    <MudNumericField id="figure-right" ReadOnly @bind-Value="Product!.Price" Min="0" Margin="Margin.Dense" Label="Unit Price" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField T="int?" @bind-Value="Stock!.Quantity" Margin="Margin.Dense" Label="Quantity" Variant="Variant.Outlined"></MudNumericField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker @bind-Date="Stock!.ExpiryDate" Margin="Margin.Dense" PickerVariant="PickerVariant.Dialog" DateFormat="dd/MM/yyyy" Label="Expiry Date" Variant="Variant.Outlined" For="(() => Stock!.ExpiryDate)" />
                </MudItem>
            </MudGrid>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Close">Close</MudButton>
            <MudButton Disabled="@AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                       Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter]
    public MudDialogInstance? DialogInstance { get; set; }

    private bool IsReadOnly = true;
    [Parameter]

    public ProductByStore? Product { get; set; } = new();
    public Stock[]? Stocks {get; set; } = [];

    private Stock? Stock = new();

    private HubConnection? hub;

    protected override async Task OnParametersSetAsync()
    {
        hub = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs")).WithStatefulReconnect().Build();
        var mode = await localStorage.GetItemAsync<bool?>("mode");
        if (mode is not null || mode!.Value)
            await hub.StartAsync();      

        Stock = Product!.Stocks!.LastOrDefault();
    }



    void Close() => DialogInstance?.Close(DialogResult.Ok(true));

    private void CalculateSellPrice(decimal value)
    {
        if (Product!.MarkupType == MarkupType.Percentage)
        {
            Product!.MarkupAmount = 0;
            Product!.MarkupPercentage = value;
            var markupAmount = Stock!.BuyPrice.GetValueOrDefault() * Product!.MarkupPercentage;
            Product!.Price = Stock!.BuyPrice.GetValueOrDefault() + markupAmount;
        }
        else
        {
            Product!.MarkupAmount = value;
            Product!.MarkupPercentage = 0;
            Product!.Price = Stock!.BuyPrice.GetValueOrDefault() + Product!.MarkupAmount;
        }
        StateHasChanged();
    }

    private async Task Save()
    {
        AppState.IsProcessing = true;
        bool? result = await Dialog.ShowMessageBox("Confirmation",
        $"Do you wish to update product?", yesText: "Yes", cancelText: "No");
        if (result is null)
        {
            AppState.IsProcessing = false;
            return;
        }
        else if (!result.Value)
        {
            AppState.IsProcessing = false;
            return;
        }
        if (string.IsNullOrEmpty(Product!.ProductName))
        {
            SnackBar.Add("Product name is required", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        if (Stock!.Quantity is null || Stock!.Quantity <= 0)
        {
            SnackBar.Add("Quantity is required", Severity.Warning);
            AppState.IsProcessing = false;
            return;
        }
        bool response = false;
        try
        {
            Product!.ModifiedDate = DateTime.Now;
            Product.Stocks.RemoveAt(0);
            Product.Stocks.Add(Stock);
            response = await ItemService.EditProduct(Product!);
            if (response)
            {
                SnackBar.Add($"Product Successfully Updated!", Severity.Success);
                await hub!.SendAsync("UpdateProduct");
                await hub!.SendAsync("UpdateProducts");
                Close();
            }           
            else
            {
                SnackBar.Add($"Error occured!", Severity.Error);
            }
        }
        catch (System.Exception ex)
        {
            if (!response)
            {
                Console.WriteLine(ex.Message);
                SnackBar.Add($"Error occured!", Severity.Error);
            }            
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }

    public async ValueTask DisposeAsync()
    {
        await hub!.StopAsync();
        await hub!.DisposeAsync();
    }

}
